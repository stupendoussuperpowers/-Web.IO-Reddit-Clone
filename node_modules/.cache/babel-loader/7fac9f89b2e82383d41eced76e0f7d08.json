{"ast":null,"code":"import _classCallCheck from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\-Web.IO-Reddit-Clone\\\\src\\\\components\\\\SubReddit\\\\PostCard.js\";\nimport React from \"react\";\nimport \"../../styles/PostPage.css\";\nimport Comment from \"../SubReddit/Comment\";\nimport { VoteCounter } from \"../VoteCounter\";\nimport { redditconn } from '../../App';\nimport ReactHtmlParser from 'react-html-parser';\n\nvar PostCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostCard, _React$Component);\n\n  function PostCard(props) {\n    var _this;\n\n    _classCallCheck(this, PostCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostCard).call(this, props));\n    _this.state = {\n      id: _this.props.id,\n      subreddit: _this.props.subreddit,\n      postData: {},\n      commentData: [],\n      subredditData: {}\n    };\n    return _this;\n  }\n\n  _createClass(PostCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      redditconn.api.get('/r/EmpireDidNothingWrong/comments/etgb6d/', {}).then(function (data) {\n        var postData = data[1][0].data.children[0].data;\n        var commentData = data[1][1].data.children;\n        console.log(\"PostData\", postData);\n        console.log(\"Preview\", postData.preview);\n\n        _this2.setState({\n          postData: postData,\n          commentData: commentData,\n          dict: data[1][0].data.children[0].data.selftext,\n          dict2: data[1][1].data.children\n        });\n      });\n      redditconn.api.get('/r/LifeProTips/about', {}).then(function (data) {\n        console.log(\"Subreddit\", data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"card-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ltr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(VoteCounter, {\n        votes: this.state.postData.score > 1000 ? \"\".concat((this.state.postData.score / 1000).toFixed(1), \"k\") : this.state.postData.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, this.state.postData.subreddit_name_prefixed, \" . \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Posted by u/\", this.state.postData.author, \" X hours ago \"), \" \"), React.createElement(\"div\", {\n        className: \"larger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.state.postData.title), React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: ReactHtmlParser(this.state.postData.selftext_html)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), this.state.postData.url ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: this.state.postData.url,\n        alt: \"thumbnail\",\n        width: \"200px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), \"Comments\", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.state.commentData.map(function (val, ind) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(Comment, {\n          key: val.data.id,\n          votes: val.data.score > 1000 ? \"\".concat((val.data.score / 1000).toFixed(1), \"k\") : val.data.score,\n          body: val.data.body_html,\n          username: val.data.author,\n          hours: \"x\",\n          subcomment: val.data.replies ? val.data.replies.data.children : [],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return PostCard;\n}(React.Component);\n\nexport { PostCard as default };","map":{"version":3,"sources":["E:/-Web.IO-Reddit-Clone/src/components/SubReddit/PostCard.js"],"names":["React","Comment","VoteCounter","redditconn","ReactHtmlParser","PostCard","props","state","id","subreddit","postData","commentData","subredditData","api","get","then","data","children","console","log","preview","setState","dict","selftext","dict2","score","toFixed","subreddit_name_prefixed","author","title","__html","selftext_html","url","map","val","ind","body_html","replies","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"../../styles/PostPage.css\";\r\nimport Comment from \"../SubReddit/Comment\";\r\nimport {VoteCounter} from \"../VoteCounter\"\r\nimport {redditconn} from '../../App';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class PostCard extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n     id: this.props.id,\r\n     subreddit: this.props.subreddit,\r\n     postData: {},\r\n     commentData: [],\r\n     subredditData: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n    redditconn.api.get('/r/EmpireDidNothingWrong/comments/etgb6d/',{}).then( data => {\r\n        var postData = data[1][0].data.children[0].data;\r\n        var commentData = data[1][1].data.children;\r\n        console.log(\"PostData\",postData);\r\n        console.log(\"Preview\", postData.preview);\r\n        this.setState({postData:postData, commentData: commentData, dict: data[1][0].data.children[0].data.selftext, dict2: data[1][1].data.children})\r\n        }\r\n    );\r\n    \r\n    redditconn.api.get('/r/LifeProTips/about', {}).then( data => {\r\n      console.log(\"Subreddit\", data);\r\n    })\r\n\r\n}\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"card-wrapper\">\r\n        <div className = \"ltr\">\r\n        \r\n        <div>\r\n          <VoteCounter votes={this.state.postData.score>1000? `${(this.state.postData.score/1000).toFixed(1)}k`: this.state.postData.score} />\r\n        </div>\r\n\r\n        <div className = \"wrap\">\r\n          <small><span className = \"bold\">{this.state.postData.subreddit_name_prefixed} . </span>\r\n          <span>Posted by u/{this.state.postData.author} X hours ago </span> </small>\r\n          <div className = \"larger\">{this.state.postData.title}</div>\r\n          {/* <div className = \"wrap\">{this.state.postData.selftext}</div> */}\r\n          \r\n          <div dangerouslySetInnerHTML={{__html: ReactHtmlParser(this.state.postData.selftext_html)}} />\r\n          {\r\n            this.state.postData.url?\r\n            <div>\r\n              <img src = {this.state.postData.url} alt = \"thumbnail\" width = \"200px\"/>\r\n            </div>:\r\n            <div></div>\r\n          }\r\n          {/* <div >\r\n            {ReactHtmlParser(this.state.postData.selftext_html)}\r\n          </div> */}\r\n          \r\n          <hr />\r\n          Comments\r\n          <div>\r\n          {\r\n            this.state.commentData.map(function(val, ind){\r\n              return (<div>\r\n              <Comment key = {val.data.id} votes = {val.data.score>1000? `${(val.data.score/1000).toFixed(1)}k`: val.data.score} body = {val.data.body_html} username = {val.data.author} hours = \"x\" subcomment = {val.data.replies? val.data.replies.data.children:[]} />\r\n              </div>)\r\n            })\r\n          }</div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}