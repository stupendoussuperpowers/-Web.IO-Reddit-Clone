{"ast":null,"code":"import _classCallCheck from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\-Web.IO-Reddit-Clone\\\\src\\\\components\\\\SubReddit\\\\Comment.js\";\nimport React, { Component } from \"react\";\nimport { VoteCounter } from \"../VoteCounter\";\nimport '../../styles/styles.css';\nimport ReactHtmlParser from 'react-html-parser';\n\nvar Comment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comment, _Component);\n\n  function Comment(props) {\n    var _this;\n\n    _classCallCheck(this, Comment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Comment).call(this, props));\n    _this.state = {\n      body: _this.props.body,\n      username: _this.props.username,\n      hours: _this.props.hours,\n      subcomment: _this.props.subcomment,\n      votes: _this.props.votes\n    };\n    return _this;\n  }\n\n  _createClass(Comment, [{\n    key: \"commentWithData\",\n    value: function commentWithData() {\n      return React.createElement(\"div\", {\n        className: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ltr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"margin-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(VoteCounter, {\n        votes: this.state.votes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"slightmargin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.state.username, \" \", this.state.hours, \" hours ago \"), React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: ReactHtmlParser(this.state.body)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), \" />\")), React.createElement(\"div\", {\n        className: \"redditline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.state.subcomment ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, this.state.subcomment.map(function (val, ind) {\n        return React.createElement(Comment, {\n          key: val.data.id,\n          votes: val.data.score > 1000 ? \"\".concat((val.data.score / 1000).toFixed(1), \"k\") : val.data.score,\n          username: val.data.author,\n          hours: \"x\",\n          body: val.data.body,\n          subcomment: val.data.replies ? val.data.replies.data.children : [],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      })) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.state.body ? this.commentWithData() : React.createElement(\"div\", {\n        className: \"comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"   Load More Comments...\"));\n    }\n  }]);\n\n  return Comment;\n}(Component); // export const Comment = (props) => {\n//   //subcomment = this.props.subcomment;\n//   var body = props.body;\n//   var username = props.username;\n//   var hours = props.hours;\n//   var subcomment = props.subcomment;\n//   return (\n//     <div className=\"comment\">\n//       <div className = \"ltr\">\n//         <div>\n//       <VoteCounter />\n//       <div className = \"line\">\n//       </div>\n//       </div>\n//       <div>\n//       <small>{username} {hours} hours ago </small>\n//       <div className = \"commentbody\">{body}</div>\n//       </div>\n//       </div>\n//       <div className = \"redditline\">\n//         {subcomment? \n//           <div>{\n//               props.subcomment.map(\n//                 function(val, ind){\n//                   return <Comment username = {val.username} hours = {val.hours} body = {val.body} \n//                     subcomment = {val.subcomment?val.subcomment:[]}\n//                   /> \n//                 }\n//               )\n//           }\n//           </div>: <div></div>\n//         }\n//       </div>\n//       </div>\n//   );\n// };\n\n\nexport default Comment;","map":{"version":3,"sources":["E:/-Web.IO-Reddit-Clone/src/components/SubReddit/Comment.js"],"names":["React","Component","VoteCounter","ReactHtmlParser","Comment","props","state","body","username","hours","subcomment","votes","__html","map","val","ind","data","id","score","toFixed","author","replies","children","commentWithData"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {VoteCounter} from \"../VoteCounter\";\r\nimport '../../styles/styles.css'\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nclass Comment extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      body: this.props.body,\r\n      username: this.props.username,\r\n      hours : this.props.hours,\r\n      subcomment : this.props.subcomment,\r\n      votes: this.props.votes\r\n    }\r\n  }\r\n\r\n  commentWithData(){\r\n    return (\r\n      <div className=\"comment\">\r\n        <div className = \"ltr\">\r\n\r\n        <div className = \"margin-right\">\r\n        <VoteCounter votes = {this.state.votes}/>\r\n        </div>\r\n\r\n        <div className = \"slightmargin\">\r\n        <small>{this.state.username} {this.state.hours} hours ago </small>\r\n        <div dangerouslySetInnerHTML={{__html: ReactHtmlParser(this.state.body)}} /> />\r\n        </div>\r\n        </div>\r\n\r\n        <div className = \"redditline\">\r\n          {this.state.subcomment? \r\n            <div>{\r\n                this.state.subcomment.map(\r\n                  function(val, ind){\r\n                    return <Comment key = {val.data.id} votes = {val.data.score>1000? `${(val.data.score/1000).toFixed(1)}k`: val.data.score} username = {val.data.author} hours = \"x\" body = {val.data.body} \r\n                      subcomment = {val.data.replies?val.data.replies.data.children:[]}\r\n                    /> \r\n                  }\r\n                )\r\n            }\r\n            </div>: <div></div>\r\n        }\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  render(){\r\n    return(\r\n      <div>\r\n      {\r\n        this.state.body?\r\n          this.commentWithData():\r\n          <div className = \"comment\">   Load More Comments...</div>\r\n      }\r\n      </div>\r\n    ); \r\n  }\r\n\r\n}\r\n\r\n// export const Comment = (props) => {\r\n//   //subcomment = this.props.subcomment;\r\n//   var body = props.body;\r\n//   var username = props.username;\r\n//   var hours = props.hours;\r\n//   var subcomment = props.subcomment;\r\n//   return (\r\n//     <div className=\"comment\">\r\n//       <div className = \"ltr\">\r\n//         <div>\r\n//       <VoteCounter />\r\n//       <div className = \"line\">\r\n        \r\n//       </div>\r\n//       </div>\r\n//       <div>\r\n//       <small>{username} {hours} hours ago </small>\r\n//       <div className = \"commentbody\">{body}</div>\r\n//       </div>\r\n//       </div>\r\n//       <div className = \"redditline\">\r\n//         {subcomment? \r\n//           <div>{\r\n//               props.subcomment.map(\r\n//                 function(val, ind){\r\n//                   return <Comment username = {val.username} hours = {val.hours} body = {val.body} \r\n//                     subcomment = {val.subcomment?val.subcomment:[]}\r\n//                   /> \r\n//                 }\r\n//               )\r\n//           }\r\n//           </div>: <div></div>\r\n//         }\r\n//       </div>\r\n//       </div>\r\n//   );\r\n// };\r\n\r\nexport default Comment;"]},"metadata":{},"sourceType":"module"}