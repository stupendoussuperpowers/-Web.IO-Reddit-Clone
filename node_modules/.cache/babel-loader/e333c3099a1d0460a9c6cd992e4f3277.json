{"ast":null,"code":"import _classCallCheck from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\-Web.IO-Reddit-Clone\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\-Web.IO-Reddit-Clone\\\\src\\\\components\\\\SubReddit\\\\PostCard.js\";\nimport React from \"react\";\nimport \"../../styles/PostPage.css\";\nimport Comment from \"../SubReddit/Comment\";\nimport { VoteCounter } from \"../VoteCounter\";\nimport * as RedditAPI from 'reddit-wrapper-v2';\n\nvar PostCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostCard, _React$Component);\n\n  function PostCard(props) {\n    var _this;\n\n    _classCallCheck(this, PostCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostCard).call(this, props));\n    _this.state = {\n      id: _this.props.id,\n      subreddit: _this.props.subreddit,\n      postData: {},\n      commentData: []\n    };\n    return _this;\n  }\n\n  _createClass(PostCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var redditconn = RedditAPI({\n        username: process.env.REACT_APP_REDDIT_USERNAME,\n        password: process.env.REACT_APP_REDDIT_PASSWORD,\n        app_id: process.env.REACT_APP_APP_ID,\n        api_secret: process.env.REACT_APP_API_SECRET,\n        retry_on_wait: true,\n        retry_on_server_error: 5,\n        retry_delay: 1,\n        logs: true\n      });\n      redditconn.api.get('/r/LifeProTips/comments/et2txr', {}).then(function (data) {\n        var postData = data[1][0].data.children[0].data;\n        var commentData = data[1][1].data.children;\n        console.log(\"CommentData\", commentData);\n\n        _this2.setState({\n          postData: postData,\n          commentData: commentData,\n          dict: data[1][0].data.children[0].data.selftext,\n          dict2: data[1][1].data.children\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"card-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ltr\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(VoteCounter, {\n        votes: this.state.postData.score > 1000 ? \"\".concat((this.state.postData.score / 1000).toFixed(1), \"k\") : this.state.postData.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.state.postData.subreddit_name_prefixed, \" . \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Posted by u/\", this.state.postData.author, \" X hours ago \"), \" \"), React.createElement(\"h3\", {\n        className: \"larger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, this.state.postData.title), React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.state.postData.selftext)), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), \"Comments\", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.state.commentData.map(function (val, ind) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, React.createElement(Comment, {\n          key: val.data.id,\n          votes: val.data.score > 1000 ? \"\".concat((val.data.score / 1000).toFixed(1), \"k\") : val.data.score,\n          body: val.data.body,\n          username: val.data.author,\n          hours: \"x\",\n          subcomment: val.data.replies ? val.data.replies.data.children : [],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }));\n      })))));\n    }\n  }]);\n\n  return PostCard;\n}(React.Component);\n\nexport { PostCard as default };","map":{"version":3,"sources":["E:/-Web.IO-Reddit-Clone/src/components/SubReddit/PostCard.js"],"names":["React","Comment","VoteCounter","RedditAPI","PostCard","props","state","id","subreddit","postData","commentData","redditconn","username","process","env","REACT_APP_REDDIT_USERNAME","password","REACT_APP_REDDIT_PASSWORD","app_id","REACT_APP_APP_ID","api_secret","REACT_APP_API_SECRET","retry_on_wait","retry_on_server_error","retry_delay","logs","api","get","then","data","children","console","log","setState","dict","selftext","dict2","score","toFixed","subreddit_name_prefixed","author","title","map","val","ind","body","replies","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"../../styles/PostPage.css\";\r\nimport Comment from \"../SubReddit/Comment\";\r\nimport {VoteCounter} from \"../VoteCounter\"\r\nimport * as RedditAPI from 'reddit-wrapper-v2';\r\n\r\n\r\nexport default class PostCard extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n     id: this.props.id,\r\n     subreddit: this.props.subreddit,\r\n     postData: {},\r\n     commentData: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    var redditconn = RedditAPI({\r\n        username: process.env.REACT_APP_REDDIT_USERNAME,\r\n        password: process.env.REACT_APP_REDDIT_PASSWORD,\r\n        app_id : process.env.REACT_APP_APP_ID,\r\n        api_secret: process.env.REACT_APP_API_SECRET,\r\n        retry_on_wait: true,\r\n        retry_on_server_error: 5,\r\n        retry_delay: 1,\r\n        logs: true\r\n    });\r\n    redditconn.api.get('/r/LifeProTips/comments/et2txr',{}).then( data => {\r\n        var postData = data[1][0].data.children[0].data;\r\n        var commentData = data[1][1].data.children;\r\n        console.log(\"CommentData\",commentData);\r\n        this.setState({postData:postData, commentData: commentData, dict: data[1][0].data.children[0].data.selftext, dict2: data[1][1].data.children})\r\n        }\r\n    );\r\n}\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"card-wrapper\">\r\n        <div className = \"ltr\">\r\n        \r\n        <div>\r\n          <VoteCounter votes={this.state.postData.score>1000? `${(this.state.postData.score/1000).toFixed(1)}k`: this.state.postData.score} />\r\n        </div>\r\n\r\n        <div className = \"wrap\">\r\n          <small><span className = \"bold\">{this.state.postData.subreddit_name_prefixed} . </span>\r\n          <span>Posted by u/{this.state.postData.author} X hours ago </span> </small>\r\n          <h3 className = \"larger\">{this.state.postData.title}</h3>\r\n          <div className = \"wrap\"><b>{this.state.postData.selftext}</b></div>\r\n          \r\n          <hr />\r\n          Comments\r\n          <div>\r\n          {\r\n            this.state.commentData.map(function(val, ind){\r\n              return (<div>\r\n              <Comment key = {val.data.id} votes = {val.data.score>1000? `${(val.data.score/1000).toFixed(1)}k`: val.data.score} body = {val.data.body} username = {val.data.author} hours = \"x\" subcomment = {val.data.replies? val.data.replies.data.children:[]} />\r\n              </div>)\r\n            })\r\n          }</div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}